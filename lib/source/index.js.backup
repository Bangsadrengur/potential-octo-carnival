const R = require('ramda');
const request = require('request-promise-native');
const get = request;

// const get = require('./get');
const getMangaId = require('./getMangaId');
const getChapterId = require('./getChapters');
const parsePages = R.compose(
  R.map(([number, path, height, width]) => ({ number, path, height, width })),
  R.prop('images')// ,
  // JSON.parse
);

const getImageUrl = (number) =>
  R.compose(
    R.prop('path'),
    R.head,
    R.filter(R.where({ number: R.equals(number) }))
  );

const url = 'http://www.mangaeden.com';
const cdnUrl = 'http://cdn.mangaeden.com/mangasimg/'
const listPath = '/api/list/0/';
const chapters = '/api/manga/';
const pages = '/api/chapter/';

const getMangaList = () => get(request, url + listPath);
const getChapterList = serieId => get(request, url + chapters + serieId);
const getPageList = chapterId => request(url + pages + chapterId);

const seriesMap = {
  'one-piece': 'One Piece',
  'onepunch-man': 'Onepunch-Man',
};

const extractUrl = new Transform();
extractUrl._transform = (pages, encoding, callback) => {
  const pagesToUrl = R.compose(
    R.concat(cdnUrl),
    getImageUrl,
    Number,
    parsePages
  );

  this.push(pagesToUrl(pages));
  callback();
};

const requestStream = new Transform();
requestStream._transform = (path) => { this.push(request(path)); callback(); };

module.exports = {
  getPages: (serie, chapter) => 
    getMangaId(getMangaList, seriesMap[serie] || serie)
    .then(getChapterId(getChapterList)(Number(chapter)))
    .then(getPageList)
    .then(parsePages),
  getPage: (serie, chapter, page) =>
    getMangaId(getMangaList, seriesMap[serie] || serie)
    .then(getChapterId(getChapterList)(Number(chapter)))
    .then(chapterId =>
      getPageList(chapterId)
      .pipe(JSONStream.parse('*'))
      .pipe(extractUrl)
      .pipe(requestStream)),
};
